{"version":3,"sources":["FrameExample.js","App.js","serviceWorker.js","index.js"],"names":["FrameExample","defaultState","emailFieldValue","nameFieldValue","state","showToast","isLoading","isDirty","searchActive","searchText","userMenuOpen","showMobileNavigation","modalActive","_this","storeName","supportSubject","supportMessage","toggleState","key","setState","prevState","Object","defineProperty","handleSearchFieldChange","value","length","handleSearchResultsDismiss","handleEmailFieldChange","handleNameFieldChange","handleSave","handleDiscard","handleSubjectChange","handleMessageChange","_this$state","this","toastMarkup","react_default","a","createElement","index_es","onDismiss","content","userMenuActions","items","navigationUserMenuMarkup","UserMenu","actions","name","detail","avatarInitials","contextualSaveBarMarkup","message","saveAction","onAction","discardAction","userMenuMarkup","initials","open","onToggle","searchResultsMarkup","searchFieldMarkup","SearchField","onChange","placeholder","topBarMarkup","showNavigationToggle","userMenu","searchResultsVisible","searchField","searchResults","onSearchResultsDismiss","onNavigationToggle","navigationMarkup","location","Section","label","icon","separator","title","onClick","action","accessibilityLabel","loadingMarkup","actualPageMarkup","AnnotatedSection","description","sectioned","type","loadingPageMarkup","size","lines","pageMarkup","modalMarkup","onClose","primaryAction","multiline","style","height","theme","colors","topBar","background","logo","width","topBarSource","contextualSaveBarSource","url","navigation","onNavigationDismiss","React","Component","App","src_FrameExample","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4318cf2f.chunk.js","sourcesContent":["import React from 'react';\nimport { AppProvider, Frame, Toast, Modal, TextField, Card, Layout, Page, Navigation, ContextualSaveBar, TopBar, ActionList, Loading, FormLayout, SkeletonPage, TextContainer, SkeletonDisplayText, SkeletonBodyText } from '@shopify/polaris';\n\nclass FrameExample extends React.Component {\n  defaultState = {\n    emailFieldValue: 'dharma@jadedpixel.com',\n    nameFieldValue: 'Jaded Pixel',\n  };\n\n  state = {\n    showToast: false,\n    isLoading: false,\n    isDirty: false,\n    searchActive: false,\n    searchText: '',\n    userMenuOpen: false,\n    showMobileNavigation: false,\n    modalActive: false,\n    nameFieldValue: this.defaultState.nameFieldValue,\n    emailFieldValue: this.defaultState.emailFieldValue,\n    storeName: this.defaultState.nameFieldValue,\n    supportSubject: '',\n    supportMessage: '',\n  };\n\n  toggleState = (key) => {\n    return () => {\n      this.setState((prevState) => ({[key]: !prevState[key]}));\n    };\n  };\n\n  handleSearchFieldChange = (value) => {\n    this.setState({searchText: value});\n    if (value.length > 0) {\n      this.setState({searchActive: true});\n    } else {\n      this.setState({searchActive: false});\n    }\n  };\n\n  handleSearchResultsDismiss = () => {\n    this.setState(() => {\n      return {\n        searchActive: false,\n        searchText: '',\n      };\n    });\n  };\n\n  handleEmailFieldChange = (emailFieldValue) => {\n    this.setState({emailFieldValue});\n    if (emailFieldValue != '') {\n      this.setState({isDirty: true});\n    }\n  };\n\n  handleNameFieldChange = (nameFieldValue) => {\n    this.setState({nameFieldValue});\n    if (nameFieldValue != '') {\n      this.setState({isDirty: true});\n    }\n  };\n\n  handleSave = () => {\n    this.defaultState.nameFieldValue = this.state.nameFieldValue;\n    this.defaultState.emailFieldValue = this.state.emailFieldValue;\n\n    this.setState({\n      isDirty: false,\n      showToast: true,\n      storeName: this.defaultState.nameFieldValue,\n    });\n  };\n\n  handleDiscard = () => {\n    this.setState({\n      emailFieldValue: this.defaultState.emailFieldValue,\n      nameFieldValue: this.defaultState.nameFieldValue,\n      isDirty: false,\n    });\n  };\n\n  handleSubjectChange = (supportSubject) => {\n    this.setState({supportSubject});\n  };\n\n  handleMessageChange = (supportMessage) => {\n    this.setState({supportMessage});\n  };\n\n  render() {\n    const {\n      showToast,\n      isLoading,\n      isDirty,\n      searchActive,\n      searchText,\n      userMenuOpen,\n      showMobileNavigation,\n      nameFieldValue,\n      emailFieldValue,\n      modalActive,\n      storeName,\n    } = this.state;\n\n    const toastMarkup = showToast ? (\n      <Toast\n        onDismiss={this.toggleState('showToast')}\n        content=\"Changes saved\"\n      />\n    ) : null;\n\n    const userMenuActions = [\n      {\n        items: [{content: 'Community forums'}],\n      },\n    ];\n\n    const navigationUserMenuMarkup = (\n      <Navigation.UserMenu\n        actions={userMenuActions}\n        name=\"Dharma\"\n        detail={storeName}\n        avatarInitials=\"D\"\n      />\n    );\n\n    const contextualSaveBarMarkup = isDirty ? (\n      <ContextualSaveBar\n        message=\"Unsaved changes\"\n        saveAction={{\n          onAction: this.handleSave,\n        }}\n        discardAction={{\n          onAction: this.handleDiscard,\n        }}\n      />\n    ) : null;\n\n    const userMenuMarkup = (\n      <TopBar.UserMenu\n        actions={userMenuActions}\n        name=\"Dharma\"\n        detail={storeName}\n        initials=\"D\"\n        open={userMenuOpen}\n        onToggle={this.toggleState('userMenuOpen')}\n      />\n    );\n\n    const searchResultsMarkup = (\n      <Card>\n        <ActionList\n          items={[\n            {content: 'Shopify help center'},\n            {content: 'Community forums'},\n          ]}\n        />\n      </Card>\n    );\n\n    const searchFieldMarkup = (\n      <TopBar.SearchField\n        onChange={this.handleSearchFieldChange}\n        value={searchText}\n        placeholder=\"Search\"\n      />\n    );\n\n    const topBarMarkup = (\n      <TopBar\n        showNavigationToggle={true}\n        userMenu={userMenuMarkup}\n        searchResultsVisible={searchActive}\n        searchField={searchFieldMarkup}\n        searchResults={searchResultsMarkup}\n        onSearchResultsDismiss={this.handleSearchResultsDismiss}\n        onNavigationToggle={this.toggleState('showMobileNavigation')}\n      />\n    );\n\n    const navigationMarkup = (\n      <Navigation location=\"/\" userMenu={navigationUserMenuMarkup}>\n        <Navigation.Section\n          items={[\n            {\n              label: 'Вернуться на сайт',\n              icon: 'arrowLeft',\n            },\n          ]}\n        />\n        <Navigation.Section\n          separator\n          title=\"Jaded Pixel App\"\n          items={[\n            {\n              label: 'Главная',\n              icon: 'home',\n              onClick: this.toggleState('isLoading'),\n            },\n            {\n              label: 'Заказы',\n              icon: 'orders',\n              onClick: this.toggleState('isLoading'),\n            },\n          ]}\n          action={{\n            icon: 'conversation',\n            accessibilityLabel: 'Contact support',\n            onClick: this.toggleState('modalActive'),\n          }}\n        />\n      </Navigation>\n    );\n\n    const loadingMarkup = isLoading ? <Loading /> : null;\n\n    const actualPageMarkup = (\n      <Page title=\"Account\">\n        <Layout>\n          <Layout.AnnotatedSection\n            title=\"Account details\"\n            description=\"Jaded Pixel will use this as your account information.\"\n          >\n            <Card sectioned>\n              <FormLayout>\n                <TextField\n                  label=\"Full name\"\n                  value={nameFieldValue}\n                  onChange={this.handleNameFieldChange}\n                />\n                <TextField\n                  type=\"email\"\n                  label=\"Email\"\n                  value={emailFieldValue}\n                  onChange={this.handleEmailFieldChange}\n                />\n              </FormLayout>\n            </Card>\n          </Layout.AnnotatedSection>\n        </Layout>\n      </Page>\n    );\n\n    const loadingPageMarkup = (\n      <SkeletonPage>\n        <Layout>\n          <Layout.Section>\n            <Card sectioned>\n              <TextContainer>\n                <SkeletonDisplayText size=\"small\" />\n                <SkeletonBodyText lines={9} />\n              </TextContainer>\n            </Card>\n          </Layout.Section>\n        </Layout>\n      </SkeletonPage>\n    );\n\n    const pageMarkup = isLoading ? loadingPageMarkup : actualPageMarkup;\n\n    const modalMarkup = (\n      <Modal\n        open={modalActive}\n        onClose={this.toggleState('modalActive')}\n        title=\"Contact support\"\n        primaryAction={{\n          content: 'Send',\n          onAction: this.toggleState('modalActive'),\n        }}\n      >\n        <Modal.Section>\n          <FormLayout>\n            <TextField\n              label=\"Subject\"\n              value={this.state.supportSubject}\n              onChange={this.handleSubjectChange}\n            />\n            <TextField\n              label=\"Message\"\n              value={this.state.supportMessage}\n              onChange={this.handleMessageChange}\n              multiline\n            />\n          </FormLayout>\n        </Modal.Section>\n      </Modal>\n    );\n\n    const theme = {\n      colors: {\n        topBar: {\n          background: '#1761ff',\n        },\n      },\n      logo: {\n        width: 124,\n        topBarSource:\n          'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-color.svg?6215648040070010999',\n        contextualSaveBarSource:\n          'https://cdn.shopify.com/s/files/1/0446/6937/files/jaded-pixel-logo-gray.svg?6215648040070010999',\n        url: 'http://jadedpixel.com',\n        accessibilityLabel: 'Jaded Pixel',\n      },\n    };\n\n    return (\n      <div style={{height: '500px'}}>\n        <AppProvider theme={theme}>\n          <Frame\n            topBar={topBarMarkup}\n            navigation={navigationMarkup}\n            showMobileNavigation={showMobileNavigation}\n            onNavigationDismiss={this.toggleState('showMobileNavigation')}\n          >\n            {contextualSaveBarMarkup}\n            {loadingMarkup}\n            {pageMarkup}\n            {toastMarkup}\n            {modalMarkup}\n          </Frame>\n        </AppProvider>\n      </div>\n    );\n  }\n}\n\nexport default FrameExample;\n","import React, { Component } from 'react';\n\nimport FrameExample from './FrameExample.js';\n\nclass App extends Component {\n  render() {\n    return (\n       <FrameExample />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@shopify/polaris/styles.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}